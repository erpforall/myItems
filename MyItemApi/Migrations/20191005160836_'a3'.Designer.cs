// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyNoteApi.Data;

namespace MyItemApi.Migrations
{
    [DbContext(typeof(ItemContext))]
    [Migration("20191005160836_'a3'")]
    partial class a3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyItemApi.Data.Entities.AttributeCategory", b =>
                {
                    b.Property<int>("AttributeCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("AttributeCategoryId");

                    b.ToTable("AttributeCategory");
                });

            modelBuilder.Entity("MyItemApi.Data.Entities.AttributeName", b =>
                {
                    b.Property<int>("AttributeNameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeCategoryId");

                    b.Property<string>("Name");

                    b.HasKey("AttributeNameId");

                    b.HasIndex("AttributeCategoryId");

                    b.ToTable("AttributeNames");
                });

            modelBuilder.Entity("MyItemApi.Data.Entities.AttributeValue", b =>
                {
                    b.Property<int>("AttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeNameId");

                    b.Property<string>("Value");

                    b.HasKey("AttributeValueId");

                    b.HasIndex("AttributeNameId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("MyItemApi.Data.Entities.ItemAttribute", b =>
                {
                    b.Property<int>("ItemAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttributeValueId");

                    b.Property<int>("ItemId");

                    b.Property<int>("LogId");

                    b.HasKey("ItemAttributeId");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LogId")
                        .IsUnique();

                    b.ToTable("ItemAttributes");
                });

            modelBuilder.Entity("MyItemApi.Data.Entities.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UpdatedById");

                    b.HasKey("LogId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.Hierarchy", b =>
                {
                    b.Property<int>("HierarchyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<int>("LogId");

                    b.Property<int?>("ParentItemId");

                    b.HasKey("HierarchyId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LogId")
                        .IsUnique();

                    b.HasIndex("ParentItemId");

                    b.ToTable("Hierarchies");
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsVirtual");

                    b.Property<int>("LogId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("OwnerId");

                    b.HasKey("ItemId");

                    b.HasIndex("LogId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.ItemData", b =>
                {
                    b.Property<int>("ItemDataId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Data");

                    b.Property<int>("ItemId");

                    b.Property<int>("LogId");

                    b.Property<string>("Path")
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .HasMaxLength(60);

                    b.Property<byte>("Type");

                    b.HasKey("ItemDataId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LogId")
                        .IsUnique();

                    b.ToTable("ItemDatas");
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.ItemText", b =>
                {
                    b.Property<int>("ItemTextId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<int>("LogId");

                    b.Property<string>("Text");

                    b.Property<string>("Title")
                        .HasMaxLength(60);

                    b.HasKey("ItemTextId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LogId")
                        .IsUnique();

                    b.ToTable("ItemTexts");
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginId")
                        .HasMaxLength(20);

                    b.Property<int>("OwnerId");

                    b.Property<string>("Password")
                        .HasMaxLength(32);

                    b.Property<string>("Salt")
                        .HasMaxLength(32);

                    b.HasKey("UserId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyItemApi.Data.Entities.AttributeName", b =>
                {
                    b.HasOne("MyItemApi.Data.Entities.AttributeCategory", "AttributeCategory")
                        .WithMany("AttributeNames")
                        .HasForeignKey("AttributeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyItemApi.Data.Entities.AttributeValue", b =>
                {
                    b.HasOne("MyItemApi.Data.Entities.AttributeName", "AttributeName")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeNameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyItemApi.Data.Entities.ItemAttribute", b =>
                {
                    b.HasOne("MyItemApi.Data.Entities.AttributeValue", "AttributeValue")
                        .WithMany("ItemAttributes")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyNoteApi.Data.Entities.Item", "Item")
                        .WithMany("ItemAttributes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyItemApi.Data.Entities.Log", "Log")
                        .WithOne("ItemAttribute")
                        .HasForeignKey("MyItemApi.Data.Entities.ItemAttribute", "LogId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MyItemApi.Data.Entities.Log", b =>
                {
                    b.HasOne("MyNoteApi.Data.Entities.User", "CreatedBy")
                        .WithMany("LogCreatedAt")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyNoteApi.Data.Entities.User", "UpdatedBy")
                        .WithMany("LogUpdatedAt")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.Hierarchy", b =>
                {
                    b.HasOne("MyNoteApi.Data.Entities.Item", "Item")
                        .WithMany("HierarchyItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MyItemApi.Data.Entities.Log", "Log")
                        .WithOne("Hierarchy")
                        .HasForeignKey("MyNoteApi.Data.Entities.Hierarchy", "LogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyNoteApi.Data.Entities.Item", "ParentItem")
                        .WithMany("HierarchyParentItems")
                        .HasForeignKey("ParentItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.Item", b =>
                {
                    b.HasOne("MyItemApi.Data.Entities.Log", "Log")
                        .WithOne("Item")
                        .HasForeignKey("MyNoteApi.Data.Entities.Item", "LogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyNoteApi.Data.Entities.Owner", "Owner")
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.ItemData", b =>
                {
                    b.HasOne("MyNoteApi.Data.Entities.Item", "Item")
                        .WithMany("ItemDatas")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyItemApi.Data.Entities.Log", "Log")
                        .WithOne("ItemData")
                        .HasForeignKey("MyNoteApi.Data.Entities.ItemData", "LogId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.ItemText", b =>
                {
                    b.HasOne("MyNoteApi.Data.Entities.Item", "Item")
                        .WithMany("ItemTexts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MyItemApi.Data.Entities.Log", "Log")
                        .WithOne("ItemText")
                        .HasForeignKey("MyNoteApi.Data.Entities.ItemText", "LogId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MyNoteApi.Data.Entities.User", b =>
                {
                    b.HasOne("MyNoteApi.Data.Entities.Owner", "Owner")
                        .WithMany("Users")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
